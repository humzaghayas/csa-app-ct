name: B2B MS Company CI/CD release (master) flow
on:
  repository_dispatch:
    types: ms-company
  push:
    branches:
      - master
    paths:
      - 'packages/b2b-ms-company/**'
      - '.github/workflows/ms-company-ci-master.yaml'
env:
    GCP_SDK_VERSION: '400.0.0'
    GITHUB_SHA: ${{ github.sha }}
    IMAGE: commercetools-ms-company
jobs:
  lint:
    name: Lint (node.js, dockerfile, markdown)
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node-version: [10.x]
    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        cd packages/b2b-ms-company
        npm install --no-audit

    - name: Lint Node.js
      run: |
        cd packages/b2b-ms-company
        npm run lint

    - name: Lint Markdown
      run: |
        cd packages/b2b-ms-company
        npm run lint-md

    - name: Lint Dockerfile
      run: |
        cd packages/b2b-ms-company
        docker run -i hadolint/hadolint:v1.17.3 < Dockerfile

  build:
    name: Build(node.js)
    needs: lint
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node-version: [10.x]
    env:
      CT_AUTH_URL: ${{ secrets.CT_AUTH_URL }}
      CT_API_URL: ${{ secrets.CT_API_URL }}
      CT_PROJECT_KEY: ${{ secrets.CT_PROJECT_KEY }}
      CT_CLIENT_ID: ${{ secrets.CT_CLIENT_ID }}
      CT_CLIENT_SECRET: ${{ secrets.CT_CLIENT_SECRET }}
      CT_SCOPE: ${{ secrets.CT_SCOPE }}
      GC_PROJECT_ID: ${{ secrets.GC_PROJECT_ID }}
      LOCALE: ${{ secrets.LOCALE}}
    steps:

      - uses: actions/checkout@v3

      - id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
     
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Build the Docker image
      - name: Build with Docker
        run: |
          cd packages/b2b-ms-company
          docker build -t gcr.io/"$GC_PROJECT_ID"/"$IMAGE":"$GITHUB_SHA" \
            --build-arg PORT=8080 .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push gcr.io/$GC_PROJECT_ID/$IMAGE:$GITHUB_SHA

  test:
    name: Test
    needs: build
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node-version: [10.x]
    env:
      CT_AUTH_URL: ${{ secrets.CT_AUTH_URL }}
      CT_API_URL: ${{ secrets.CT_API_URL }}
      CT_PROJECT_KEY: ${{ secrets.CT_PROJECT_KEY }}
      CT_CLIENT_ID: ${{ secrets.CT_CLIENT_ID }}
      CT_CLIENT_SECRET: ${{ secrets.CT_CLIENT_SECRET }}
      CT_SCOPE: ${{ secrets.CT_SCOPE }}
      GC_PROJECT_ID: ${{ secrets.GC_PROJECT_ID }}
      LOCALE: ${{ secrets.LOCALE}}
    steps:

      - id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
     
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      - name: Unit Testing
        run: |
          docker run --rm --user=root --entrypoint="/bin/bash"                  \
          -t gcr.io/"$GC_PROJECT_ID"/"$IMAGE":"$GITHUB_SHA"                     \
          -c "NODE_ENV=development; cd /opt/node_app/app; npm install; npm test"

   #   - name: Audit for security vulnerabilities
   #     run: |
   #       docker run --rm --user=root --entrypoint="/bin/bash"                  \
   #       -t gcr.io/"$GC_PROJECT_ID"/"$IMAGE":"$GITHUB_SHA"                     \
   #       -c "NODE_ENV=development; cd /opt/node_app/app; npm install; npm audit --production"

  deploy:
   name: Deploy
   needs: build
   runs-on: ubuntu-18.04
   strategy:
     matrix:
       node-version: [10.x]
   env:
      CT_AUTH_URL: ${{ secrets.CT_AUTH_URL }}
      CT_API_URL: ${{ secrets.CT_API_URL }}
      CT_PROJECT_KEY: ${{ secrets.CT_PROJECT_KEY }}
      CT_CLIENT_ID: ${{ secrets.CT_CLIENT_ID }}
      CT_CLIENT_SECRET: ${{ secrets.CT_CLIENT_SECRET }}
      CT_SCOPE: ${{ secrets.CT_SCOPE }}
      GC_PROJECT_ID: ${{ secrets.GC_PROJECT_ID }}
      LOCALE: ${{ secrets.LOCALE}}
   steps:

     - uses: actions/checkout@v3

     - id: auth
       uses: google-github-actions/auth@v0
       with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
     
     - name: Set up Cloud SDK
       uses: google-github-actions/setup-gcloud@v0

     - name: Deploy to Cloud Run
       run: |
         # Interpolate environment variables
         cd packages/b2b-ms-company
         gcloud config set project $GC_PROJECT_ID
         gcloud run deploy ms-company --platform=managed --region=us-east1 --allow-unauthenticated   \
         --image=gcr.io/"$GC_PROJECT_ID"/"$IMAGE":"$GITHUB_SHA"                                      \
         --set-env-vars=HOST="0.0.0.0",CT_AUTH_URL=$CT_AUTH_URL,CT_API_URL=$CT_API_URL,CT_PROJECT_KEY=$CT_PROJECT_KEY,CT_CLIENT_ID=$CT_CLIENT_ID,CT_CLIENT_SECRET=$CT_CLIENT_SECRET,CT_SCOPE=$CT_SCOPE,GC_PROJECT_ID=$GC_PROJECT_ID,LOCALE=$LOCALE
