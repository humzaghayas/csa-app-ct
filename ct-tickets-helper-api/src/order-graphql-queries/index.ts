export const FETCH_ORDERS = `query FetchAllOrders($limit: Int!, $offset: Int!, $sort: [String!]){
    orders(limit: $limit, offset: $offset, sort: $sort){
      total
      count
      offset
      results{
        id
        orderState
        orderNumber
        paymentState
        shipmentState
        customer{
            firstName
            lastName
        }
        customerEmail
        createdAt
        createdBy{
          customerRef{
            typeId
            id
          }
        }
        lastModifiedAt
        shippingInfo{
            shippingMethodName
            shippingMethodState
        }
        lineItems{
          quantity
        }
        totalPrice{
          type
          centAmount
          currencyCode
          fractionDigits
        }
      }
    }
  }`
export const FETCH_ORDER_BY_ID = `query($id:String!){
    order(id:$id){
        id
        version
        createdAt
        lastModifiedAt
          createdBy{
          customerRef{
            typeId
            id
          }
        }
        customerId
        customerEmail
        country
        orderState
        orderNumber
        paymentState
          shipmentState
        origin
        ...shippingInfo
        ...shippingAddress
        ...billingAddress
        ...lineItems
        ...cart
        ...paymentInfo
        ...totalPrice
        ...taxedPrice
        ...returnInfo
        customLineItems{
            __typename
        }
        discountCodes{
            __typename
        }
        directDiscounts{
            __typename
        }
    }
  }
  fragment totalPrice on Order{
        totalPrice{
            type
            currencyCode
            centAmount
            fractionDigits
        }            
    }
  fragment taxedPrice on Order{
        taxedPrice{
           totalNet{
                type
                currencyCode
                centAmount
                fractionDigits
           }
           totalGross{
                type
                currencyCode
                centAmount
                fractionDigits
           }
           totalTax{
                type
                currencyCode
                centAmount
                fractionDigits
           }
           taxPortions{
               rate
               amount{
                    type
                    currencyCode
                    centAmount
                    fractionDigits
               }
               name
           }
        }            
    }
  fragment shippingInfo on Order{
    shippingInfo{
        shippingMethodName
        shippingMethodState
        price{
            type
            currencyCode
            centAmount
            fractionDigits
        }
        shippingRate{
            price{
                type
                currencyCode
                centAmount
                fractionDigits
            }
            freeAbove{
                type
                currencyCode
                centAmount
                fractionDigits
            }
            tiers{
                type
                __typename
            }
        }
        taxRate{
            name
            amount
            country
            includedInPrice
            id
            subRates{
                __typename
            }
        }
        taxCategory{
            id
            name
        }
        shippingMethod{
            id
            name
        }
        taxedPrice{
            totalNet{
                type
                currencyCode
                centAmount
                fractionDigits
            }
            totalGross{
                type
                currencyCode
                centAmount
                fractionDigits
            }
            totalTax{
                type
                currencyCode
                centAmount
                fractionDigits
            }
        }
    }
  }
  fragment shippingAddress on Order{
    shippingAddress{
        id
        streetName
        streetNumber
        postalCode
          city
          state
          building
        country
    }
  }
  fragment lineItems on Order{
    lineItems{
        id
        productId
        productKey
        name(locale:"en-US")
        ...prioductType
        ...variant
        ...price
        quantity
        discountedPricePerQuantity{
            __typename
        }
        ...taxRate
        lastModifiedAt
        ...state
        priceMode
        lineItemMode
        ...totalPriceLineItem
        ...taxedPriceLineItem
    }
  }
  fragment cart on Order{
    cart{
        id        
    }
  }
  fragment paymentInfo on Order{
    paymentInfo{
        payments{
            id
        }
    }
  }
  fragment billingAddress on Order{
    billingAddress{
        id
        streetName
        streetNumber
        postalCode
          city
          state
          building
        country
    }
  }
  fragment state on LineItem{
    state{
        quantity
        state{
            id
              name(locale:"en-US")
              description(locale:"en-US")
              initial
        }        
    }
  }
  fragment prioductType on LineItem{
    productType{
            id
            name
        }
  }
  fragment variant on LineItem{
    variant{

        sku
        key
        prices{
            id
            value{
                type
                currencyCode
                centAmount
                fractionDigits
            }
            country
        }
        images{
            url
        }
        attributesRaw{
            name
            value
        }
        assets{
            __typename
        }
    }
  }
  fragment price on LineItem{
    price{
        id
            value{
                type
                currencyCode
                centAmount
                fractionDigits
            }
            country
    }
  }
  fragment taxRate on LineItem{
    taxRate{
        name
        amount
        includedInPrice
        country
        id
        subRates{
            __typename
        }
    }
  }
  fragment totalPriceLineItem on LineItem{
    totalPrice{
            type
            currencyCode
            centAmount
            fractionDigits
        }
  }
  fragment taxedPriceLineItem on LineItem{
    taxedPrice{
           totalNet{
                type
                currencyCode
                centAmount
                fractionDigits
           }
           totalGross{
                type
                currencyCode
                centAmount
                fractionDigits
           }
           totalTax{
                type
                currencyCode
                centAmount
                fractionDigits
           }
        } 
  }
  
  fragment returnInfo on Order{
    returnInfo{
          returnTrackingId
          returnDate
          items{
            type
            id
            quantity
            comment
            shipmentState
            paymentState
            lastModifiedAt
            createdAt
          }
        }
  }`
export const UPDATE_ORDER_BY_ID = `mutation updateOrderById($version:Long!,
    $actions:[OrderUpdateAction!]!,
    $id:String!){
      updateOrder(version:$version,actions:$actions,id:$id){
        id
        orderState
        orderNumber
        shipmentState
        paymentState
        version
      }
  }`
export const CREATE_EDIT_ORDER_BY_ID = `mutation createOrderEdit($draft:OrderEditDraft!){
    createOrderEdit(draft:$draft){
      id
      version
      result{
        type
      }
    }
  }`
export const REPLICATE_ORDER = `mutation orderReplicate($referenceInput:ReferenceInput!) {
  replicateCart(reference:$referenceInput){
    id
  }
}`



export const FETCH_PAYMENTS_TO_DISPLAY = `query FETCH_PAYMENTS_TO_DISPLAY($where:String,$offset:Int,$limit:Int) {
  orders(where:$where,offset:$offset,limit:$limit){
  	count
    total
    results{
      id
      paymentInfo{
        payments{
          transactions{
            timestamp
            state
          }
          paymentStatus{
            interfaceCode
            interfaceText
            state{
              key
            }
          }
          paymentMethodInfo{
            method
            name(locale:"en")
          }
        }
      }
    }
  }
}
`